{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class containing SynonymMaps operations. */\nexport class SynonymMapsImpl {\n  /**\n   * Initialize a new instance of the class SynonymMaps class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Creates a new synonym map or updates a synonym map if it already exists.\n   * @param synonymMapName The name of the synonym map to create or update.\n   * @param synonymMap The definition of the synonym map to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(synonymMapName, synonymMap, options) {\n    return this.client.sendOperationRequest({\n      synonymMapName,\n      synonymMap,\n      options\n    }, createOrUpdateOperationSpec);\n  }\n  /**\n   * Deletes a synonym map.\n   * @param synonymMapName The name of the synonym map to delete.\n   * @param options The options parameters.\n   */\n  delete(synonymMapName, options) {\n    return this.client.sendOperationRequest({\n      synonymMapName,\n      options\n    }, deleteOperationSpec);\n  }\n  /**\n   * Retrieves a synonym map definition.\n   * @param synonymMapName The name of the synonym map to retrieve.\n   * @param options The options parameters.\n   */\n  get(synonymMapName, options) {\n    return this.client.sendOperationRequest({\n      synonymMapName,\n      options\n    }, getOperationSpec);\n  }\n  /**\n   * Lists all synonym maps available for a search service.\n   * @param options The options parameters.\n   */\n  list(options) {\n    return this.client.sendOperationRequest({\n      options\n    }, listOperationSpec);\n  }\n  /**\n   * Creates a new synonym map.\n   * @param synonymMap The definition of the synonym map to create.\n   * @param options The options parameters.\n   */\n  create(synonymMap, options) {\n    return this.client.sendOperationRequest({\n      synonymMap,\n      options\n    }, createOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */false);\nconst createOrUpdateOperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.ifMatch, Parameters.ifNoneMatch, Parameters.prefer],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [Parameters.accept, Parameters.ifMatch, Parameters.ifNoneMatch],\n  serializer\n};\nconst getOperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListSynonymMapsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};","map":{"version":3,"names":["coreClient","Mappers","Parameters","SynonymMapsImpl","constructor","client","createOrUpdate","synonymMapName","synonymMap","options","sendOperationRequest","createOrUpdateOperationSpec","delete","deleteOperationSpec","get","getOperationSpec","list","listOperationSpec","create","createOperationSpec","serializer","createSerializer","path","httpMethod","responses","bodyMapper","SynonymMap","default","SearchError","requestBody","queryParameters","apiVersion","urlParameters","endpoint","headerParameters","contentType","accept","ifMatch","ifNoneMatch","prefer","mediaType","ListSynonymMapsResult","select"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\generated\\service\\operations\\synonymMaps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { SynonymMaps } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SearchServiceClient } from \"../searchServiceClient\";\nimport {\n  SynonymMap,\n  SynonymMapsCreateOrUpdateOptionalParams,\n  SynonymMapsCreateOrUpdateResponse,\n  SynonymMapsDeleteOptionalParams,\n  SynonymMapsGetOptionalParams,\n  SynonymMapsGetResponse,\n  SynonymMapsListOptionalParams,\n  SynonymMapsListResponse,\n  SynonymMapsCreateOptionalParams,\n  SynonymMapsCreateResponse\n} from \"../models\";\n\n/** Class containing SynonymMaps operations. */\nexport class SynonymMapsImpl implements SynonymMaps {\n  private readonly client: SearchServiceClient;\n\n  /**\n   * Initialize a new instance of the class SynonymMaps class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SearchServiceClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new synonym map or updates a synonym map if it already exists.\n   * @param synonymMapName The name of the synonym map to create or update.\n   * @param synonymMap The definition of the synonym map to create or update.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    synonymMapName: string,\n    synonymMap: SynonymMap,\n    options?: SynonymMapsCreateOrUpdateOptionalParams\n  ): Promise<SynonymMapsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { synonymMapName, synonymMap, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * Deletes a synonym map.\n   * @param synonymMapName The name of the synonym map to delete.\n   * @param options The options parameters.\n   */\n  delete(\n    synonymMapName: string,\n    options?: SynonymMapsDeleteOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { synonymMapName, options },\n      deleteOperationSpec\n    );\n  }\n\n  /**\n   * Retrieves a synonym map definition.\n   * @param synonymMapName The name of the synonym map to retrieve.\n   * @param options The options parameters.\n   */\n  get(\n    synonymMapName: string,\n    options?: SynonymMapsGetOptionalParams\n  ): Promise<SynonymMapsGetResponse> {\n    return this.client.sendOperationRequest(\n      { synonymMapName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Lists all synonym maps available for a search service.\n   * @param options The options parameters.\n   */\n  list(\n    options?: SynonymMapsListOptionalParams\n  ): Promise<SynonymMapsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Creates a new synonym map.\n   * @param synonymMap The definition of the synonym map to create.\n   * @param options The options parameters.\n   */\n  create(\n    synonymMap: SynonymMap,\n    options?: SynonymMapsCreateOptionalParams\n  ): Promise<SynonymMapsCreateResponse> {\n    return this.client.sendOperationRequest(\n      { synonymMap, options },\n      createOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.prefer\n  ],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    404: {},\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/synonymmaps('{synonymMapName}')\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.synonymMapName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListSynonymMapsResult\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.select],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path: \"/synonymmaps\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SynonymMap\n    },\n    default: {\n      bodyMapper: Mappers.SearchError\n    }\n  },\n  requestBody: Parameters.synonymMap,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}