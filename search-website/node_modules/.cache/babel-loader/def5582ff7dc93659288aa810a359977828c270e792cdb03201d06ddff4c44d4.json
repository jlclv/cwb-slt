{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Class used to perform batch operations\n * with multiple documents to the index.\n */\nexport class IndexDocumentsBatch {\n  constructor(actions = []) {\n    this.actions = actions;\n  }\n  /**\n   * Upload an array of documents to the index.\n   * @param documents - The documents to upload.\n   */\n  upload(documents) {\n    const batch = documents.map(doc => {\n      return Object.assign(Object.assign({}, doc), {\n        __actionType: \"upload\"\n      });\n    });\n    this.actions.push(...batch);\n  }\n  /**\n   * Update a set of documents in the index.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   */\n  merge(documents) {\n    const batch = documents.map(doc => {\n      return Object.assign(Object.assign({}, doc), {\n        __actionType: \"merge\"\n      });\n    });\n    this.actions.push(...batch);\n  }\n  /**\n   * Update a set of documents in the index or uploads them if they don't exist.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The new/updated documents.\n   */\n  mergeOrUpload(documents) {\n    const batch = documents.map(doc => {\n      return Object.assign(Object.assign({}, doc), {\n        __actionType: \"mergeOrUpload\"\n      });\n    });\n    this.actions.push(...batch);\n  }\n  delete(keyNameOrDocuments, keyValues) {\n    if (keyValues) {\n      const keyName = keyNameOrDocuments;\n      const batch = keyValues.map(keyValue => {\n        return {\n          __actionType: \"delete\",\n          [keyName]: keyValue\n        };\n      });\n      this.actions.push(...batch);\n    } else {\n      const documents = keyNameOrDocuments;\n      const batch = documents.map(document => {\n        return Object.assign({\n          __actionType: \"delete\"\n        }, document);\n      });\n      this.actions.push(...batch);\n    }\n  }\n}","map":{"version":3,"names":["IndexDocumentsBatch","constructor","actions","upload","documents","batch","map","doc","Object","assign","__actionType","push","merge","mergeOrUpload","delete","keyNameOrDocuments","keyValues","keyName","keyValue","document"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\indexDocumentsBatch.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { IndexDocumentsAction } from \"./indexModels\";\n\n/**\n * Class used to perform batch operations\n * with multiple documents to the index.\n */\nexport class IndexDocumentsBatch<TModel> {\n  /**\n   * The set of actions taken in this batch.\n   */\n  public readonly actions: IndexDocumentsAction<TModel>[];\n\n  constructor(actions: IndexDocumentsAction<TModel>[] = []) {\n    this.actions = actions;\n  }\n\n  /**\n   * Upload an array of documents to the index.\n   * @param documents - The documents to upload.\n   */\n  public upload(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"upload\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The updated documents.\n   */\n  public merge(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"merge\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Update a set of documents in the index or uploads them if they don't exist.\n   * For more details about how merging works, see https://docs.microsoft.com/en-us/rest/api/searchservice/AddUpdate-or-Delete-Documents\n   * @param documents - The new/updated documents.\n   */\n  public mergeOrUpload(documents: TModel[]): void {\n    const batch = documents.map<IndexDocumentsAction<TModel>>((doc) => {\n      return {\n        ...doc,\n        __actionType: \"mergeOrUpload\",\n      };\n    });\n\n    this.actions.push(...batch);\n  }\n\n  /**\n   * Delete a set of documents.\n   * @param keyName - The name of their primary key in the index.\n   * @param keyValues - The primary key values of documents to delete.\n   */\n  public delete(keyName: keyof TModel, keyValues: string[]): void;\n\n  /**\n   * Delete a set of documents.\n   * @param documents - Documents to be deleted.\n   */\n  public delete(documents: TModel[]): void;\n\n  public delete(keyNameOrDocuments: keyof TModel | TModel[], keyValues?: string[]): void {\n    if (keyValues) {\n      const keyName = keyNameOrDocuments as keyof TModel;\n\n      const batch = keyValues.map<IndexDocumentsAction<TModel>>((keyValue) => {\n        return {\n          __actionType: \"delete\",\n          [keyName]: keyValue,\n        } as IndexDocumentsAction<TModel>;\n      });\n\n      this.actions.push(...batch);\n    } else {\n      const documents = keyNameOrDocuments as TModel[];\n\n      const batch = documents.map<IndexDocumentsAction<TModel>>((document) => {\n        return {\n          __actionType: \"delete\",\n          ...document,\n        } as IndexDocumentsAction<TModel>;\n      });\n\n      this.actions.push(...batch);\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA;;;;AAIA,OAAM,MAAOA,mBAAmB;EAM9BC,YAAYC,OAAA,GAA0C,EAAE;IACtD,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEA;;;;EAIOC,MAAMA,CAACC,SAAmB;IAC/B,MAAMC,KAAK,GAAGD,SAAS,CAACE,GAAG,CAAgCC,GAAG,IAAI;MAChE,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,GAAG;QACNG,YAAY,EAAE;MAAQ;IAE1B,CAAC,CAAC;IAEF,IAAI,CAACR,OAAO,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;EAC7B;EAEA;;;;;EAKOO,KAAKA,CAACR,SAAmB;IAC9B,MAAMC,KAAK,GAAGD,SAAS,CAACE,GAAG,CAAgCC,GAAG,IAAI;MAChE,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,GAAG;QACNG,YAAY,EAAE;MAAO;IAEzB,CAAC,CAAC;IAEF,IAAI,CAACR,OAAO,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;EAC7B;EAEA;;;;;EAKOQ,aAAaA,CAACT,SAAmB;IACtC,MAAMC,KAAK,GAAGD,SAAS,CAACE,GAAG,CAAgCC,GAAG,IAAI;MAChE,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,GAAG;QACNG,YAAY,EAAE;MAAe;IAEjC,CAAC,CAAC;IAEF,IAAI,CAACR,OAAO,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;EAC7B;EAeOS,MAAMA,CAACC,kBAA2C,EAAEC,SAAoB;IAC7E,IAAIA,SAAS,EAAE;MACb,MAAMC,OAAO,GAAGF,kBAAkC;MAElD,MAAMV,KAAK,GAAGW,SAAS,CAACV,GAAG,CAAgCY,QAAQ,IAAI;QACrE,OAAO;UACLR,YAAY,EAAE,QAAQ;UACtB,CAACO,OAAO,GAAGC;SACoB;MACnC,CAAC,CAAC;MAEF,IAAI,CAAChB,OAAO,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;KAC5B,MAAM;MACL,MAAMD,SAAS,GAAGW,kBAA8B;MAEhD,MAAMV,KAAK,GAAGD,SAAS,CAACE,GAAG,CAAgCa,QAAQ,IAAI;QACrE,OAAOX,MAAA,CAAAC,MAAA;UACLC,YAAY,EAAE;QAAQ,GACnBS,QAAQ,CACoB;MACnC,CAAC,CAAC;MAEF,IAAI,CAACjB,OAAO,CAACS,IAAI,CAAC,GAAGN,KAAK,CAAC;;EAE/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}