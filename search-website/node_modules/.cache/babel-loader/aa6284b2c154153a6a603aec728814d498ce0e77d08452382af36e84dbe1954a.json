{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst AcceptHeaderName = \"Accept\";\nconst odataMetadataPolicy = \"OdataMetadataPolicy\";\n/**\n * A policy factory for setting the Accept header to ignore odata metadata\n * @internal\n */\nexport function createOdataMetadataPolicy(metadataLevel) {\n  return {\n    name: odataMetadataPolicy,\n    async sendRequest(request, next) {\n      request.headers.set(AcceptHeaderName, `application/json;odata.metadata=${metadataLevel}`);\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["AcceptHeaderName","odataMetadataPolicy","createOdataMetadataPolicy","metadataLevel","name","sendRequest","request","next","headers","set"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\odataMetadataPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\nconst AcceptHeaderName = \"Accept\";\n\nexport type MetadataLevel = \"none\" | \"minimal\";\nconst odataMetadataPolicy = \"OdataMetadataPolicy\";\n\n/**\n * A policy factory for setting the Accept header to ignore odata metadata\n * @internal\n */\nexport function createOdataMetadataPolicy(metadataLevel: MetadataLevel): PipelinePolicy {\n  return {\n    name: odataMetadataPolicy,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      request.headers.set(AcceptHeaderName, `application/json;odata.metadata=${metadataLevel}`);\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AASA,MAAMA,gBAAgB,GAAG,QAAQ;AAGjC,MAAMC,mBAAmB,GAAG,qBAAqB;AAEjD;;;;AAIA,OAAM,SAAUC,yBAAyBA,CAACC,aAA4B;EACpE,OAAO;IACLC,IAAI,EAAEH,mBAAmB;IACzB,MAAMI,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3DD,OAAO,CAACE,OAAO,CAACC,GAAG,CAACT,gBAAgB,EAAE,mCAAmCG,aAAa,EAAE,CAAC;MACzF,OAAOI,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}