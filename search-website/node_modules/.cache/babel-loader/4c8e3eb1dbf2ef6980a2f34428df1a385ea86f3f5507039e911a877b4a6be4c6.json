{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction formatNullAndUndefined(input) {\n  if (input === null || input === undefined) {\n    return \"null\";\n  }\n  return input;\n}\nfunction escapeQuotesIfString(input, previous) {\n  let result = input;\n  if (typeof input === \"string\") {\n    result = input.replace(/'/g, \"''\");\n    // check if we need to escape this literal\n    if (!previous.trim().endsWith(\"'\")) {\n      result = `'${result}'`;\n    }\n  }\n  return result;\n}\n/**\n * Escapes an odata filter expression to avoid errors with quoting string literals.\n * Example usage:\n * ```ts\n * const baseRateMax = 200;\n * const ratingMin = 4;\n * const filter = odata`Rooms/any(room: room/BaseRate lt ${baseRateMax}) and Rating ge ${ratingMin}`;\n * ```\n * For more information on supported syntax see: https://docs.microsoft.com/en-us/azure/search/search-query-odata-filter\n * @param strings - Array of strings for the expression\n * @param values - Array of values for the expression\n */\nexport function odata(strings, ...values) {\n  const results = [];\n  for (let i = 0; i < strings.length; i++) {\n    results.push(strings[i]);\n    if (i < values.length) {\n      if (values[i] === null || values[i] === undefined) {\n        results.push(formatNullAndUndefined(values[i]));\n      } else {\n        results.push(escapeQuotesIfString(values[i], strings[i]));\n      }\n    }\n  }\n  return results.join(\"\");\n}","map":{"version":3,"names":["formatNullAndUndefined","input","undefined","escapeQuotesIfString","previous","result","replace","trim","endsWith","odata","strings","values","results","i","length","push","join"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\odata.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nfunction formatNullAndUndefined(input: unknown): string | unknown {\n  if (input === null || input === undefined) {\n    return \"null\";\n  }\n\n  return input;\n}\n\nfunction escapeQuotesIfString(input: unknown, previous: string): string | unknown {\n  let result = input;\n\n  if (typeof input === \"string\") {\n    result = input.replace(/'/g, \"''\");\n    // check if we need to escape this literal\n    if (!previous.trim().endsWith(\"'\")) {\n      result = `'${result}'`;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Escapes an odata filter expression to avoid errors with quoting string literals.\n * Example usage:\n * ```ts\n * const baseRateMax = 200;\n * const ratingMin = 4;\n * const filter = odata`Rooms/any(room: room/BaseRate lt ${baseRateMax}) and Rating ge ${ratingMin}`;\n * ```\n * For more information on supported syntax see: https://docs.microsoft.com/en-us/azure/search/search-query-odata-filter\n * @param strings - Array of strings for the expression\n * @param values - Array of values for the expression\n */\nexport function odata(strings: TemplateStringsArray, ...values: unknown[]): string {\n  const results = [];\n  for (let i = 0; i < strings.length; i++) {\n    results.push(strings[i]);\n    if (i < values.length) {\n      if (values[i] === null || values[i] === undefined) {\n        results.push(formatNullAndUndefined(values[i]));\n      } else {\n        results.push(escapeQuotesIfString(values[i], strings[i]));\n      }\n    }\n  }\n  return results.join(\"\");\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,sBAAsBA,CAACC,KAAc;EAC5C,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE;IACzC,OAAO,MAAM;;EAGf,OAAOD,KAAK;AACd;AAEA,SAASE,oBAAoBA,CAACF,KAAc,EAAEG,QAAgB;EAC5D,IAAIC,MAAM,GAAGJ,KAAK;EAElB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7BI,MAAM,GAAGJ,KAAK,CAACK,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IAClC;IACA,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAClCH,MAAM,GAAG,IAAIA,MAAM,GAAG;;;EAI1B,OAAOA,MAAM;AACf;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUI,KAAKA,CAACC,OAA6B,EAAE,GAAGC,MAAiB;EACvE,MAAMC,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACvCD,OAAO,CAACG,IAAI,CAACL,OAAO,CAACG,CAAC,CAAC,CAAC;IACxB,IAAIA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAE;MACrB,IAAIH,MAAM,CAACE,CAAC,CAAC,KAAK,IAAI,IAAIF,MAAM,CAACE,CAAC,CAAC,KAAKX,SAAS,EAAE;QACjDU,OAAO,CAACG,IAAI,CAACf,sBAAsB,CAACW,MAAM,CAACE,CAAC,CAAC,CAAC,CAAC;OAChD,MAAM;QACLD,OAAO,CAACG,IAAI,CAACZ,oBAAoB,CAACQ,MAAM,CAACE,CAAC,CAAC,EAAEH,OAAO,CAACG,CAAC,CAAC,CAAC,CAAC;;;;EAI/D,OAAOD,OAAO,CAACI,IAAI,CAAC,EAAE,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}