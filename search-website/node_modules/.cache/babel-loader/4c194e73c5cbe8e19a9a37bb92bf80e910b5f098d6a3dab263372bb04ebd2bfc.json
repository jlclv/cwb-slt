{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport GeographyPoint from \"./geographyPoint\";\nconst ISO8601DateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?Z$/i;\nconst GeoJSONPointTypeName = \"Point\";\nconst WorldGeodeticSystem1984 = \"EPSG:4326\"; // See https://epsg.io/4326\nexport function serialize(obj) {\n  return walk(obj, value => {\n    const result = serializeSpecialNumbers(value);\n    return result;\n  });\n}\nexport function deserialize(obj) {\n  return walk(obj, value => {\n    let result = deserializeSpecialNumbers(value);\n    result = deserializeDates(result);\n    result = deserializeGeoPoint(result);\n    return result;\n  });\n}\nfunction walk(start, mapper) {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const seenMarker = new WeakMap();\n  const result = {\n    value: undefined\n  };\n  const queue = [{\n    value: start,\n    parent: result,\n    key: \"value\"\n  }];\n  while (queue.length) {\n    const current = queue.shift();\n    if (typeof current.value === \"object\" && current.value !== null) {\n      if (seenMarker.has(current.value)) {\n        continue;\n      } else {\n        seenMarker.set(current.value, true);\n      }\n    }\n    const mapped = mapper(current.value);\n    if ((current === null || current === void 0 ? void 0 : current.parent) && current.key) {\n      current.parent[current.key] = mapped;\n    }\n    if (typeof mapped === \"object\" && mapped !== null) {\n      for (const key of Object.keys(mapped)) {\n        queue.push({\n          value: mapped[key],\n          parent: mapped,\n          key\n        });\n      }\n    }\n  }\n  return result.value;\n}\nfunction serializeSpecialNumbers(input) {\n  if (typeof input === \"number\") {\n    if (isNaN(input)) {\n      return \"NaN\";\n    } else if (input === Infinity) {\n      return \"INF\";\n    } else if (input === -Infinity) {\n      return \"-INF\";\n    }\n  }\n  return input;\n}\nfunction deserializeSpecialNumbers(input) {\n  if (typeof input === \"string\") {\n    if (input === \"NaN\") {\n      return NaN;\n    } else if (input === \"INF\") {\n      return Infinity;\n    } else if (input === \"-INF\") {\n      return -Infinity;\n    }\n  }\n  return input;\n}\nfunction deserializeDates(input) {\n  if (typeof input === \"string\") {\n    if (ISO8601DateRegex.test(input)) {\n      return new Date(input);\n    }\n  }\n  return input;\n}\nfunction deserializeGeoPoint(input) {\n  if (isGeoJSONPoint(input)) {\n    return new GeographyPoint({\n      longitude: input.coordinates[0],\n      latitude: input.coordinates[1]\n    });\n  }\n  return input;\n}\nfunction isGeoJSONPoint(obj) {\n  const requiredKeys = [\"type\", \"coordinates\"];\n  return isValidObject(obj, {\n    requiredKeys,\n    propertyValidator: key => {\n      switch (key) {\n        case \"type\":\n          return obj.type === GeoJSONPointTypeName;\n          break;\n        case \"coordinates\":\n          return isCoordinateArray(obj.coordinates);\n          break;\n        case \"crs\":\n          return isCrs(obj.crs);\n          break;\n        default:\n          return false;\n      }\n    }\n  });\n}\nfunction isCoordinateArray(maybeCoordinates) {\n  if (!Array.isArray(maybeCoordinates)) {\n    return false;\n  }\n  if (maybeCoordinates.length !== 2) {\n    return false;\n  }\n  if (typeof maybeCoordinates[0] !== \"number\" || typeof maybeCoordinates[1] !== \"number\") {\n    return false;\n  }\n  return true;\n}\nfunction isCrs(maybeCrs) {\n  return isValidObject(maybeCrs, {\n    requiredKeys: [\"type\", \"properties\"],\n    propertyValidator: key => {\n      switch (key) {\n        case \"type\":\n          return maybeCrs.type === \"name\";\n          break;\n        case \"properties\":\n          return isCrsProperties(maybeCrs.properties);\n          break;\n        default:\n          return false;\n      }\n    }\n  });\n}\nfunction isCrsProperties(maybeProperties) {\n  return isValidObject(maybeProperties, {\n    requiredKeys: [\"name\"],\n    propertyValidator: key => {\n      if (key === \"name\") {\n        return maybeProperties.name === WorldGeodeticSystem1984;\n      } else {\n        return false;\n      }\n    }\n  });\n}\nfunction isValidObject(obj, options = {}) {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n  const keys = Object.keys(obj);\n  if (options.requiredKeys) {\n    for (const requiredKey of options.requiredKeys) {\n      if (!keys.includes(requiredKey)) {\n        return false;\n      }\n    }\n  }\n  if (options.propertyValidator) {\n    for (const key of keys) {\n      if (!options.propertyValidator(key)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["GeographyPoint","ISO8601DateRegex","GeoJSONPointTypeName","WorldGeodeticSystem1984","serialize","obj","walk","value","result","serializeSpecialNumbers","deserialize","deserializeSpecialNumbers","deserializeDates","deserializeGeoPoint","start","mapper","seenMarker","WeakMap","undefined","queue","parent","key","length","current","shift","has","set","mapped","Object","keys","push","input","isNaN","Infinity","NaN","test","Date","isGeoJSONPoint","longitude","coordinates","latitude","requiredKeys","isValidObject","propertyValidator","type","isCoordinateArray","isCrs","crs","maybeCoordinates","Array","isArray","maybeCrs","isCrsProperties","properties","maybeProperties","name","options","requiredKey","includes"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\serialization.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport GeographyPoint from \"./geographyPoint\";\n\nconst ISO8601DateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?Z$/i;\nconst GeoJSONPointTypeName = \"Point\";\nconst WorldGeodeticSystem1984 = \"EPSG:4326\"; // See https://epsg.io/4326\n\nexport function serialize<OutputT>(obj: unknown): OutputT {\n  return walk(obj, (value) => {\n    const result = serializeSpecialNumbers(value);\n    return result;\n  });\n}\n\nexport function deserialize<OutputT>(obj: unknown): OutputT {\n  return walk(obj, (value) => {\n    let result = deserializeSpecialNumbers(value);\n    result = deserializeDates(result);\n    result = deserializeGeoPoint(result);\n    return result;\n  });\n}\n\nfunction walk(start: unknown, mapper: (val: any) => any): any {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  const seenMarker = new WeakMap<object, boolean>();\n  const result = { value: undefined };\n  const queue: { value: any; parent: any; key: string }[] = [\n    { value: start, parent: result, key: \"value\" },\n  ];\n\n  while (queue.length) {\n    const current = queue.shift()!;\n\n    if (typeof current.value === \"object\" && current.value !== null) {\n      if (seenMarker.has(current.value)) {\n        continue;\n      } else {\n        seenMarker.set(current.value, true);\n      }\n    }\n\n    const mapped = mapper(current.value);\n    if (current?.parent && current.key) {\n      current.parent[current.key] = mapped;\n    }\n    if (typeof mapped === \"object\" && mapped !== null) {\n      for (const key of Object.keys(mapped)) {\n        queue.push({\n          value: mapped[key],\n          parent: mapped,\n          key,\n        });\n      }\n    }\n  }\n\n  return result.value;\n}\n\nfunction serializeSpecialNumbers(input: unknown): unknown {\n  if (typeof input === \"number\") {\n    if (isNaN(input)) {\n      return \"NaN\";\n    } else if (input === Infinity) {\n      return \"INF\";\n    } else if (input === -Infinity) {\n      return \"-INF\";\n    }\n  }\n  return input;\n}\n\nfunction deserializeSpecialNumbers(input: unknown): unknown {\n  if (typeof input === \"string\") {\n    if (input === \"NaN\") {\n      return NaN;\n    } else if (input === \"INF\") {\n      return Infinity;\n    } else if (input === \"-INF\") {\n      return -Infinity;\n    }\n  }\n  return input;\n}\n\nfunction deserializeDates(input: unknown): Date | unknown {\n  if (typeof input === \"string\") {\n    if (ISO8601DateRegex.test(input)) {\n      return new Date(input);\n    }\n  }\n  return input;\n}\n\nfunction deserializeGeoPoint(input: unknown): GeographyPoint | unknown {\n  if (isGeoJSONPoint(input)) {\n    return new GeographyPoint({ longitude: input.coordinates[0], latitude: input.coordinates[1] });\n  }\n\n  return input;\n}\n\ninterface GeoJSONPoint {\n  type: \"Point\";\n  coordinates: [number, number];\n  crs: {\n    type: \"name\";\n    properties: {\n      name: \"EPSG:4326\";\n    };\n  };\n}\n\nfunction isGeoJSONPoint(obj: any): obj is GeoJSONPoint {\n  const requiredKeys = [\"type\", \"coordinates\"];\n  return isValidObject(obj, {\n    requiredKeys,\n    propertyValidator: (key) => {\n      switch (key) {\n        case \"type\":\n          return obj.type === GeoJSONPointTypeName;\n          break;\n        case \"coordinates\":\n          return isCoordinateArray(obj.coordinates);\n          break;\n        case \"crs\":\n          return isCrs(obj.crs);\n          break;\n        default:\n          return false;\n      }\n    },\n  });\n}\n\nfunction isCoordinateArray(maybeCoordinates: any): boolean {\n  if (!Array.isArray(maybeCoordinates)) {\n    return false;\n  }\n  if (maybeCoordinates.length !== 2) {\n    return false;\n  }\n  if (typeof maybeCoordinates[0] !== \"number\" || typeof maybeCoordinates[1] !== \"number\") {\n    return false;\n  }\n  return true;\n}\n\nfunction isCrs(maybeCrs: any): boolean {\n  return isValidObject(maybeCrs, {\n    requiredKeys: [\"type\", \"properties\"],\n    propertyValidator: (key) => {\n      switch (key) {\n        case \"type\":\n          return maybeCrs.type === \"name\";\n          break;\n        case \"properties\":\n          return isCrsProperties(maybeCrs.properties);\n          break;\n        default:\n          return false;\n      }\n    },\n  });\n}\n\nfunction isCrsProperties(maybeProperties: any): boolean {\n  return isValidObject(maybeProperties, {\n    requiredKeys: [\"name\"],\n    propertyValidator: (key) => {\n      if (key === \"name\") {\n        return maybeProperties.name === WorldGeodeticSystem1984;\n      } else {\n        return false;\n      }\n    },\n  });\n}\n\nfunction isValidObject(\n  obj: any,\n  options: {\n    requiredKeys?: string[];\n    propertyValidator?: (keyName: string) => boolean;\n  } = {}\n): boolean {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n\n  const keys = Object.keys(obj);\n\n  if (options.requiredKeys) {\n    for (const requiredKey of options.requiredKeys) {\n      if (!keys.includes(requiredKey)) {\n        return false;\n      }\n    }\n  }\n\n  if (options.propertyValidator) {\n    for (const key of keys) {\n      if (!options.propertyValidator(key)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}