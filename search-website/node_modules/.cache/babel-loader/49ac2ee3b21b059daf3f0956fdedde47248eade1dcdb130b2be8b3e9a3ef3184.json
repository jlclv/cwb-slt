{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nexport const SearchError = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport const SearchDocumentsResult = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchDocumentsResult\",\n    modelProperties: {\n      count: {\n        serializedName: \"@odata\\\\.count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      facets: {\n        serializedName: \"@search\\\\.facets\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Composite\",\n                  className: \"FacetResult\"\n                }\n              }\n            }\n          }\n        }\n      },\n      answers: {\n        serializedName: \"@search\\\\.answers\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"QueryAnswerResult\"\n            }\n          }\n        }\n      },\n      nextPageParameters: {\n        serializedName: \"@search\\\\.nextPageParameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchRequest\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchResult\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@odata\\\\.nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticPartialResponseReason: {\n        serializedName: \"@search\\\\.semanticPartialResponseReason\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticPartialResponseType: {\n        serializedName: \"@search\\\\.semanticPartialResponseType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const FacetResult = {\n  type: {\n    name: \"Composite\",\n    className: \"FacetResult\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\nexport const QueryAnswerResult = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryAnswerResult\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      score: {\n        serializedName: \"score\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      key: {\n        serializedName: \"key\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      highlights: {\n        serializedName: \"highlights\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const SearchRequest = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchRequest\",\n    modelProperties: {\n      includeTotalResultCount: {\n        serializedName: \"count\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      facets: {\n        serializedName: \"facets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightFields: {\n        serializedName: \"highlight\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryType: {\n        serializedName: \"queryType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"simple\", \"full\", \"semantic\"]\n        }\n      },\n      scoringStatistics: {\n        serializedName: \"scoringStatistics\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"local\", \"global\"]\n        }\n      },\n      sessionId: {\n        serializedName: \"sessionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scoringParameters: {\n        serializedName: \"scoringParameters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      scoringProfile: {\n        serializedName: \"scoringProfile\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchMode: {\n        serializedName: \"searchMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"any\", \"all\"]\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      skip: {\n        serializedName: \"skip\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      semanticConfigurationName: {\n        serializedName: \"semanticConfiguration\",\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticErrorHandling: {\n        serializedName: \"semanticErrorHandling\",\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticMaxWaitInMilliseconds: {\n        constraints: {\n          InclusiveMinimum: 700\n        },\n        serializedName: \"semanticMaxWaitInMilliseconds\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      answers: {\n        serializedName: \"answers\",\n        type: {\n          name: \"String\"\n        }\n      },\n      captions: {\n        serializedName: \"captions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vectorQueries: {\n        serializedName: \"vectorQueries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VectorQuery\"\n            }\n          }\n        }\n      },\n      vectorFilterMode: {\n        serializedName: \"vectorFilterMode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const VectorQuery = {\n  type: {\n    name: \"Composite\",\n    className: \"VectorQuery\",\n    uberParent: \"VectorQuery\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      kNearestNeighborsCount: {\n        serializedName: \"k\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exhaustive: {\n        serializedName: \"exhaustive\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\nexport const SearchResult = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchResult\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      _score: {\n        serializedName: \"@search\\\\.score\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      _rerankerScore: {\n        serializedName: \"@search\\\\.rerankerScore\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      _highlights: {\n        serializedName: \"@search\\\\.highlights\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"String\"\n                }\n              }\n            }\n          }\n        }\n      },\n      _captions: {\n        serializedName: \"@search\\\\.captions\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"QueryCaptionResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport const QueryCaptionResult = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryCaptionResult\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      highlights: {\n        serializedName: \"highlights\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const SuggestDocumentsResult = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SuggestResult\"\n            }\n          }\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\nexport const SuggestResult = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestResult\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      _text: {\n        serializedName: \"@search\\\\.text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const SuggestRequest = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestRequest\",\n    modelProperties: {\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\nexport const IndexBatch = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexBatch\",\n    modelProperties: {\n      actions: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexAction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport const IndexAction = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexAction\",\n    additionalProperties: {\n      type: {\n        name: \"Object\"\n      }\n    },\n    modelProperties: {\n      __actionType: {\n        serializedName: \"@search\\\\.action\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"upload\", \"merge\", \"mergeOrUpload\", \"delete\"]\n        }\n      }\n    }\n  }\n};\nexport const IndexDocumentsResult = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexingResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport const IndexingResult = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingResult\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      succeeded: {\n        serializedName: \"status\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\nexport const AutocompleteResult = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteResult\",\n    modelProperties: {\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AutocompleteItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\nexport const AutocompleteItem = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteItem\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryPlusText: {\n        serializedName: \"queryPlusText\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\nexport const AutocompleteRequest = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteRequest\",\n    modelProperties: {\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      autocompleteMode: {\n        serializedName: \"autocompleteMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"oneTerm\", \"twoTerms\", \"oneTermWithContext\"]\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\nexport const VectorizedQuery = {\n  serializedName: \"vector\",\n  type: {\n    name: \"Composite\",\n    className: \"VectorizedQuery\",\n    uberParent: \"VectorQuery\",\n    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,\n    modelProperties: Object.assign(Object.assign({}, VectorQuery.type.modelProperties), {\n      vector: {\n        serializedName: \"vector\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    })\n  }\n};\nexport let discriminators = {\n  VectorQuery: VectorQuery,\n  \"VectorQuery.vector\": VectorizedQuery\n};","map":{"version":3,"names":["SearchError","type","name","className","modelProperties","code","serializedName","readOnly","message","required","details","element","SearchDocumentsResult","count","coverage","facets","value","answers","nullable","nextPageParameters","results","nextLink","semanticPartialResponseReason","semanticPartialResponseType","FacetResult","additionalProperties","QueryAnswerResult","score","key","text","highlights","SearchRequest","includeTotalResultCount","filter","highlightFields","highlightPostTag","highlightPreTag","minimumCoverage","orderBy","queryType","allowedValues","scoringStatistics","sessionId","scoringParameters","scoringProfile","searchText","searchFields","searchMode","select","skip","top","semanticConfigurationName","semanticErrorHandling","semanticMaxWaitInMilliseconds","constraints","InclusiveMinimum","captions","vectorQueries","vectorFilterMode","VectorQuery","uberParent","polymorphicDiscriminator","clientName","kind","kNearestNeighborsCount","fields","exhaustive","SearchResult","_score","_rerankerScore","_highlights","_captions","QueryCaptionResult","SuggestDocumentsResult","SuggestResult","_text","SuggestRequest","useFuzzyMatching","suggesterName","IndexBatch","actions","IndexAction","__actionType","IndexDocumentsResult","IndexingResult","errorMessage","succeeded","statusCode","AutocompleteResult","AutocompleteItem","queryPlusText","AutocompleteRequest","autocompleteMode","VectorizedQuery","Object","assign","vector","discriminators"],"sources":["C:\\Users\\julia\\Desktop\\cwb-slt\\search-website\\node_modules\\@azure\\search-documents\\src\\generated\\data\\models\\mappers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const SearchError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SearchDocumentsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchDocumentsResult\",\n    modelProperties: {\n      count: {\n        serializedName: \"@odata\\\\.count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      facets: {\n        serializedName: \"@search\\\\.facets\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Sequence\",\n              element: { type: { name: \"Composite\", className: \"FacetResult\" } }\n            }\n          }\n        }\n      },\n      answers: {\n        serializedName: \"@search\\\\.answers\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"QueryAnswerResult\"\n            }\n          }\n        }\n      },\n      nextPageParameters: {\n        serializedName: \"@search\\\\.nextPageParameters\",\n        type: {\n          name: \"Composite\",\n          className: \"SearchRequest\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SearchResult\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"@odata\\\\.nextLink\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticPartialResponseReason: {\n        serializedName: \"@search\\\\.semanticPartialResponseReason\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticPartialResponseType: {\n        serializedName: \"@search\\\\.semanticPartialResponseType\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FacetResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"FacetResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const QueryAnswerResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryAnswerResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      score: {\n        serializedName: \"score\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      key: {\n        serializedName: \"key\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      highlights: {\n        serializedName: \"highlights\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchRequest\",\n    modelProperties: {\n      includeTotalResultCount: {\n        serializedName: \"count\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      facets: {\n        serializedName: \"facets\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightFields: {\n        serializedName: \"highlight\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queryType: {\n        serializedName: \"queryType\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"simple\", \"full\", \"semantic\"]\n        }\n      },\n      scoringStatistics: {\n        serializedName: \"scoringStatistics\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"local\", \"global\"]\n        }\n      },\n      sessionId: {\n        serializedName: \"sessionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scoringParameters: {\n        serializedName: \"scoringParameters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      scoringProfile: {\n        serializedName: \"scoringProfile\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchMode: {\n        serializedName: \"searchMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"any\", \"all\"]\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      skip: {\n        serializedName: \"skip\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      semanticConfigurationName: {\n        serializedName: \"semanticConfiguration\",\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticErrorHandling: {\n        serializedName: \"semanticErrorHandling\",\n        type: {\n          name: \"String\"\n        }\n      },\n      semanticMaxWaitInMilliseconds: {\n        constraints: {\n          InclusiveMinimum: 700\n        },\n        serializedName: \"semanticMaxWaitInMilliseconds\",\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      answers: {\n        serializedName: \"answers\",\n        type: {\n          name: \"String\"\n        }\n      },\n      captions: {\n        serializedName: \"captions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      vectorQueries: {\n        serializedName: \"vectorQueries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VectorQuery\"\n            }\n          }\n        }\n      },\n      vectorFilterMode: {\n        serializedName: \"vectorFilterMode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const VectorQuery: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"VectorQuery\",\n    uberParent: \"VectorQuery\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      kNearestNeighborsCount: {\n        serializedName: \"k\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exhaustive: {\n        serializedName: \"exhaustive\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SearchResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SearchResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      _score: {\n        serializedName: \"@search\\\\.score\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      _rerankerScore: {\n        serializedName: \"@search\\\\.rerankerScore\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      _highlights: {\n        serializedName: \"@search\\\\.highlights\",\n        readOnly: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Sequence\", element: { type: { name: \"String\" } } }\n          }\n        }\n      },\n      _captions: {\n        serializedName: \"@search\\\\.captions\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"QueryCaptionResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const QueryCaptionResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QueryCaptionResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      highlights: {\n        serializedName: \"highlights\",\n        readOnly: true,\n        nullable: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestDocumentsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SuggestResult\"\n            }\n          }\n        }\n      },\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestResult\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      _text: {\n        serializedName: \"@search\\\\.text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SuggestRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SuggestRequest\",\n    modelProperties: {\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        serializedName: \"orderby\",\n        type: {\n          name: \"String\"\n        }\n      },\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      select: {\n        serializedName: \"select\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IndexBatch: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexBatch\",\n    modelProperties: {\n      actions: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexAction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IndexAction: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexAction\",\n    additionalProperties: { type: { name: \"Object\" } },\n    modelProperties: {\n      __actionType: {\n        serializedName: \"@search\\\\.action\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"upload\", \"merge\", \"mergeOrUpload\", \"delete\"]\n        }\n      }\n    }\n  }\n};\n\nexport const IndexDocumentsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexDocumentsResult\",\n    modelProperties: {\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IndexingResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IndexingResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IndexingResult\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      succeeded: {\n        serializedName: \"status\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteResult\",\n    modelProperties: {\n      coverage: {\n        serializedName: \"@search\\\\.coverage\",\n        readOnly: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      results: {\n        serializedName: \"value\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AutocompleteItem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteItem: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteItem\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      queryPlusText: {\n        serializedName: \"queryPlusText\",\n        required: true,\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AutocompleteRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AutocompleteRequest\",\n    modelProperties: {\n      searchText: {\n        serializedName: \"search\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      autocompleteMode: {\n        serializedName: \"autocompleteMode\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"oneTerm\", \"twoTerms\", \"oneTermWithContext\"]\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useFuzzyMatching: {\n        serializedName: \"fuzzy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      highlightPostTag: {\n        serializedName: \"highlightPostTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      highlightPreTag: {\n        serializedName: \"highlightPreTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      minimumCoverage: {\n        serializedName: \"minimumCoverage\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      searchFields: {\n        serializedName: \"searchFields\",\n        type: {\n          name: \"String\"\n        }\n      },\n      suggesterName: {\n        serializedName: \"suggesterName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      top: {\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const VectorizedQuery: coreClient.CompositeMapper = {\n  serializedName: \"vector\",\n  type: {\n    name: \"Composite\",\n    className: \"VectorizedQuery\",\n    uberParent: \"VectorQuery\",\n    polymorphicDiscriminator: VectorQuery.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...VectorQuery.type.modelProperties,\n      vector: {\n        serializedName: \"vector\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  VectorQuery: VectorQuery,\n  \"VectorQuery.vector\": VectorizedQuery\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}